import tkinter as tk
from tkinter import ttk
import sqlite3

# Создание SQLite базы данных и таблицы
conn = sqlite3.connect('employee.db')
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS employees (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        phone TEXT,
        email TEXT,
        salary REAL
    )
''')
conn.commit()

# Функция для добавления сотрудника в базу данных
def add_employee():
    name = name_entry.get()
    phone = phone_entry.get()
    email = email_entry.get()
    salary = float(salary_entry.get())
    cursor.execute('INSERT INTO employees (name, phone, email, salary) VALUES (?, ?, ?, ?)',
                   (name, phone, email, salary))
    conn.commit()
    update_treeview()
    clear_entries()

# Функция для обновления данных о сотруднике
def update_employee():
    selected_item = treeview.selection()
    if selected_item:
        name = name_entry.get()
        phone = phone_entry.get()
        email = email_entry.get()
        salary = float(salary_entry.get())
        employee_id = treeview.item(selected_item)['values'][0]
        cursor.execute('UPDATE employees SET name=?, phone=?, email=?, salary=? WHERE id=?',
                       (name, phone, email, salary, employee_id))
        conn.commit()
        update_treeview()
        clear_entries()

# Функция для удаления сотрудника
def delete_employee():
    selected_item = treeview.selection()
    if selected_item:
        employee_id = treeview.item(selected_item)['values'][0]
        cursor.execute('DELETE FROM employees WHERE id=?', (employee_id,))
        conn.commit()
        update_treeview()
        clear_entries()

# Функция для поиска сотрудника по ФИО
def search_employee():
    name = search_entry.get()
    cursor.execute('SELECT * FROM employees WHERE name LIKE ?', ('%' + name + '%',))
    data = cursor.fetchall()
    update_treeview(data)

# Функция для очистки полей ввода
def clear_entries():
    name_entry.delete(0, 'end')
    phone_entry.delete(0, 'end')
    email_entry.delete(0, 'end')
    salary_entry.delete(0, 'end')

# Функция для обновления данных в Treeview
def update_treeview(data=None):
    treeview.delete(*treeview.get_children())
    if data is None:
        cursor.execute('SELECT * FROM employees')
        data = cursor.fetchall()
    for row in data:
        treeview.insert('', 'end', values=row)

# Создание графического интерфейса
root = tk.Tk()
root.title('Список сотрудников компании')

frame1 = ttk.Frame(root)
frame1.grid(row=0, column=0, padx=10, pady=10)

name_label = ttk.Label(frame1, text='ФИО:')
name_label.grid(row=0, column=0)
name_entry = ttk.Entry(frame1)
name_entry.grid(row=0, column=1)

phone_label = ttk.Label(frame1, text='Номер телефона:')
phone_label.grid(row=1, column=0)
phone_entry = ttk.Entry(frame1)
phone_entry.grid(row=1, column=1)

email_label = ttk.Label(frame1, text='Адрес электронной почты:')
email_label.grid(row=2, column=0)
email_entry = ttk.Entry(frame1)
email_entry.grid(row=2, column=1)

salary_label = ttk.Label(frame1, text='Заработная плата:')
salary_label.grid(row=3, column=0)
salary_entry = ttk.Entry(frame1)
salary_entry.grid(row=3, column=1)

add_button = ttk.Button(frame1, text='Добавить', command=add_employee)
add_button.grid(row=4, column=0)
update_button = ttk.Button(frame1, text='Обновить', command=update_employee)
update_button.grid(row=4, column=1)
delete_button = ttk.Button(frame1, text='Удалить', command=delete_employee)
delete_button.grid(row=4, column=2)

frame2 = ttk.Frame(root)
frame2.grid(row=0, column=1, padx=10, pady=10)

search_label = ttk.Label(frame2, text='Поиск по ФИО:')
search_label.grid(row=0, column=0)
search_entry = ttk.Entry(frame2)
search_entry.grid(row=0, column=1)
search_button = ttk.Button(frame2, text='Поиск', command=search_employee)
search_button.grid(row=0, column=2)

treeview = ttk.Treeview(frame2, columns=('ID', 'ФИО', 'Телефон', 'Email', 'Зарплата'), show='headings')
treeview.column('ID', width=30)
treeview.column('ФИО', width=150)
treeview.column('Телефон', width=100)
treeview.column('Email', width=150)
treeview.column('Зарплата', width=80)
treeview.heading('ID', text='ID')
treeview.heading('ФИО', text='ФИО')
treeview.heading('Телефон', text='Телефон')
treeview.heading('Email', text='Email')
treeview.heading('Зарплата', text='Зарплата')
treeview.grid(row=1, column=0, columnspan=3)

update_treeview()

root.mainloop()

# Закрытие соединения с базой данных при завершении программы
conn.close()
